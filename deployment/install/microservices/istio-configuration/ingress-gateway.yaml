# An ingress Gateway describes a load balancer operating at the edge of the 
# mesh that receives incoming HTTP/TCP connections. It configures exposed
# ports, protocols, etc. but, unlike Kubernetes Ingress Resources, does not
# include any traffic routing configuration. Traffic routing for ingress 
# traffic is instead configured using Istio routing rules, exactly in the
# same was as for internal service requests.
#
# https://istio.io/docs/reference/config/networking/v1alpha3/gateway/
#
# We are using hosts='* below because this is a demo environment that can hop
# around from domain to domain and cluster to cluster. You can easily scope it
# to run with custom ingress by adding one or more explicit hosts in place of '*'.
#
# Also, OpenShift *should* automatically create routes for me based on this:
# https://docs.openshift.com/container-platform/3.11/servicemesh-install/servicemesh-install.html#automatic-route-creation
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: microservices-demo-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      number: 80
      name: http
      protocol: HTTP
  - hosts:
    - '*'
    port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE # enables HTTPS on this port
      serverCertificate: /etc/certs/cert-chain.pem
      privateKey: /etc/certs/key.pem
---
# This VirtualService maps the gateway and all incoming hosts requests
# http goes to app-ui on port 8080
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: microservices-demo
spec:
  hosts:
  - '*'
  gateways:
  - microservices-demo-gateway
  http:
  - route:
    - destination:
        host: app-ui
        port:
          number: 8080
  # tls:
  # - match:
  #   - port: 443
  #     sniHosts:
  #     - '*'
  #   route:
  #   - destination:
  #       host: app-ui
  #       port:
  #         number: 8443